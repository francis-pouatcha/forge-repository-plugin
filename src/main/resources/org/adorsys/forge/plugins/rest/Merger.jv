package org.adorsys.forge.plugins.rest;

import java.util.HashSet;
import java.util.Set;
import java.util.List;

import javax.inject.Inject;

public class ${entityName}Merger {

	@Inject
	private ${entityRepoName} repository;

	public ${entityName} bindComposed(${entityName} entity) {
		if(entity==null) return null;
		if(entity.getId()==null) return entity;
		return repository.save(entity);
	}

	public ${entityName} bindAggregated(${entityName} entity) {
		if(entity==null)return null;
		if(entity.getId()==null)return null;
		return repository.findBy(entity.getId());
	}

   
   public void bindComposed(final Set<${entityName}> entities){
	   HashSet<${entityName}> oldCol = new HashSet<${entityName}>(entities);
	   entities.clear();
	   for (${entityName} entity : oldCol) {
		   entity = bindComposed(entity);
		   if(entity!=null)entities.add(entity);
	   }
   }

   public void bindAggregated(final Set<${entityName}> entities){
	   HashSet<${entityName}> oldCol = new HashSet<${entityName}>(entities);
	   entities.clear();
	   for (${entityName} entity : oldCol) {
		   entity = bindAggregated(entity);
		   if(entity!=null)entities.add(entity);
	   }
   }


   public ${entityName} unbind(final ${entityName} entity, List<String> fieldList){
	   if(entity==null)return null;
	   ${entityName} newEntity = new ${entityName}();
	   newEntity.setId(entity.getId());
	   newEntity.setVersion(entity.getVersion());
		MergerUtils.copyFields(entity, newEntity, fieldList);
	   return newEntity;
   }
   
   public Set<${entityName}> unbind(final Set<${entityName}> entities){
	   if(entities==null)return null;
	   return new HashSet<${entityName}>();
   }
}
