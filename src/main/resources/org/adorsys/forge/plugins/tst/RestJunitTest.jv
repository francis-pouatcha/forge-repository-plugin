package org.adorsys.forge.plugins.tst;

import java.io.File;
import java.net.URL;
import java.util.List;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.container.test.api.RunAsClient;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.Filters;
import org.jboss.shrinkwrap.api.GenericArchive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.EmptyAsset;
import org.jboss.shrinkwrap.api.asset.StringAsset;
import org.jboss.shrinkwrap.api.importer.ExplodedImporter;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.descriptor.api.Descriptors;
import org.jboss.shrinkwrap.descriptor.api.persistence20.PersistenceDescriptor;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(Arquillian.class)
public class ${entityInfo.entity.getName()}ServiceTest
{

   @ArquillianResource URL url;

   @Deployment
   public static WebArchive createDeployment()
   {

      File[] libs = new File[] {};
      try
      {
         libs = Maven.resolver().loadPomFromFile("pom.xml")
               .importCompileAndRuntimeDependencies().resolve()
               .withTransitivity().asFile();
      }
      catch (Exception ex)
      {
         // Noop
      }

      PersistenceDescriptor persistenceXml = Descriptors.importAs(PersistenceDescriptor.class)  
              .fromFile(new File("src/main/resources/META-INF/persistence.xml"));

      WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "${entityInfo.entity.getName()?uncap_first}ServiceTest.war")
			<#list packagesToImport as packageToImport>
	   		.addPackage("${packageToImport}")
			</#list>
			<#list entityInfo.endPointDeployementPackages as packageToImport>
	   		.addPackage("${packageToImport}")
			</#list>
            .addAsResource(new StringAsset(persistenceXml.exportAsString()), "META-INF/persistence.xml")  
            .addAsManifestResource("META-INF/validation.xml", "validation.xml")
            .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
            .addAsLibraries(libs)
            .merge(ShrinkWrap.create(GenericArchive.class)
                  .as(ExplodedImporter.class)
                  .importDirectory("src/main/webapp")
                  .as(GenericArchive.class), "/", Filters.includeAll());
      return webArchive;
   }

   @Test
   @RunAsClient
   public void testDeleteById()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
      ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
      List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */

	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();
	   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   
	   <#list entityInfo.aggregated as aggregatedField>
	   // Aggregate ${aggregatedField.getName()}
	   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
	   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
	   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
	   
	   </#list>
	   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	  /*
	   * End Create object
	   */

	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
	   entityList = searchResult.getResultList();
	   Assert.assertEquals(1, entityList.size());

		// All referenced field aggregated and composed are there.
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   Assert.assertEquals(${entityInfo.getCountForReferencedFieldsOfType(referencedType)}, ${referencedType?uncap_first}List.size());
	   
	   </#list>
	   
	   // delete entity.
	   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(created.getId());

	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
	   entityList = searchResult.getResultList();
	   Assert.assertEquals(0, entityList.size());

		// Composed fields are supposed to be deleted. Only aggregated fields left.
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   Assert.assertEquals(${entityInfo.getCountForAggregatedFieldsOfType(referencedType)}, ${referencedType?uncap_first}List.size());
	   
	   </#list>
	
	   // delete aggregated fields	   
	   <#list entityInfo.aggregated as aggregatedField>
	   ${aggregatedField.getType()?uncap_first}SearchResult = ${aggregatedField.getType()?uncap_first}Service.listAll();
	   ${aggregatedField.getType()?uncap_first}List = ${aggregatedField.getType()?uncap_first}SearchResult.getResultList(); 
	   for (${aggregatedField.getType()} f : ${aggregatedField.getType()?uncap_first}List) {
		   ${aggregatedField.getType()?uncap_first}Service.deleteById(f.getId());
	   }
	   ${aggregatedField.getType()?uncap_first}SearchResult = ${aggregatedField.getType()?uncap_first}Service.listAll();
	   ${aggregatedField.getType()?uncap_first}List = ${aggregatedField.getType()?uncap_first}SearchResult.getResultList();
	   Assert.assertEquals(0, ${aggregatedField.getType()?uncap_first}List.size());
	   
	   </#list>	   
   }

   @Test
   @RunAsClient
   public void testUpdate()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */

	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();
	   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   
	   <#list entityInfo.aggregated as aggregatedField>
	   // Aggregate ${aggregatedField.getName()}
	   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
	   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
	   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
	   
	   </#list>
	   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	  /*
	   * End Create object
	   */
	   
	  /*
	   * Start modify Object
	   */
	   // modify ${entityInfo.entity.getName()?uncap_first} 
	   List<String> modified = ${entityInfo.entity.getName()?uncap_first}DoD.modify(created);
	   ${entityInfo.entity.getName()} updated = ${entityInfo.entity.getName()?uncap_first}Service.update(created);
   }

   @Test
   @RunAsClient
   public void testFindById()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */

	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();
	   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   
	   <#list entityInfo.aggregated as aggregatedField>
	   // Aggregate ${aggregatedField.getName()}
	   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
	   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
	   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
	   
	   </#list>
	   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	  /*
	   * End Create object
	   */
	   
	   ${entityInfo.entity.getName()} found = ${entityInfo.entity.getName()?uncap_first}Service.findById(created.getId());
	   
	   Assert.assertNotNull(found);
   }
   
   @Test
   @RunAsClient
   public void testLoadReferences()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */

	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();
	   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   
	   <#list entityInfo.aggregated as aggregatedField>
	   // Aggregate ${aggregatedField.getName()}
	   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
	   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
	   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
	   
	   </#list>
	   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	  /*
	   * End Create object
	   */
	   
	   ${entityInfo.entity.getName()} found = ${entityInfo.entity.getName()?uncap_first}Service.findById(created.getId());
	   
	   Assert.assertNotNull(found);

	   
	   // Composed object are carrying their value.
	   <#list entityInfo.composed as field>
	   ${field.getType()} found${field.getName()?cap_first} = found.get${field.getName()?cap_first}();
	   Object ${field.getName()}FieldValue = ${field.getType()?uncap_first}DoD.readRandomValue(found${field.getName()?cap_first});
	   Assert.assertNotNull(${field.getName()}FieldValue);

	   </#list>
	   // Aggregated object are carrying their value.
	   <#list entityInfo.aggregated as field>
	   ${field.getType()} found${field.getName()?cap_first} = found.get${field.getName()?cap_first}();
	   Object ${field.getName()}FieldValue = ${field.getType()?uncap_first}DoD.readRandomValue(found${field.getName()?cap_first});
	   Assert.assertNotNull(${field.getName()}FieldValue);
	   </#list>
   }   

   @Test
   @RunAsClient
   public void testListAll()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */
	   
	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   for (int i = 0; i < 30; i++) {
		   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
		
	   }
	  /*
	   * End Create object
	   */
	   
	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
	   entityList = searchResult.getResultList();
	   Assert.assertEquals(30, entityList.size());
   }

   @Test
   @RunAsClient
   public void testListAllCursor()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */
	   
	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   for (int i = 0; i < 30; i++) {
		   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
		
	   }
	  /*
	   * End Create object
	   */
	   
	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll(1,5);
       entityList = searchResult.getResultList();
	   Assert.assertEquals(5, entityList.size());

	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll(6,10);
       entityList = searchResult.getResultList();
	   Assert.assertEquals(10, entityList.size());

	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll(12,40);
       entityList = searchResult.getResultList();
	   Assert.assertEquals(18, entityList.size());
   }

   @Test
   @RunAsClient
   public void testCount()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */
	   
	  /*
	   * Start Create object
	   */
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()}DoD ${entityInfo.entity.getName()?uncap_first}DoD = new ${entityInfo.entity.getName()}DoD();

		// Instantiate data on demand classes per referencedTypes field type
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   for (int i = 0; i < 30; i++) {
		   ${entityInfo.entity.getName()} entity = ${entityInfo.entity.getName()?uncap_first}DoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
		
	   }
	  /*
	   * End Create object
	   */
	   
	   Long count = ${entityInfo.entity.getName()?uncap_first}Service.count();
	   Assert.assertEquals(new Long(30), count);
   }

   @Test
   @RunAsClient
   public void testFindBy()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */
	   
	  /*
	   * Start Create object. 
	   */
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   ${entityInfo.entity.getName()}DoD entityDoD = new ${entityInfo.entity.getName()}DoD();
	   for (int i = 0; i < 3; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	   <#assign searchFieldName = entityInfo.getRandomSimpleField().getName()>
	   String searchFieldName = "${searchFieldName}";
		Object searchValue=null; 		 
	   for (int i = 0; i < 7; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
		   if(searchValue==null){
		   	    searchValue =  entity.get${searchFieldName?cap_first}();
		   } else {
		   		// create all 7 objects with the same field value
		   		${entityInfo.importIfRequired(searchFieldName)}
		   		entity.set${searchFieldName?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
		   }
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	  /*
	   * End Create object
	   */
	   ${entityInfo.entity.getName()} searchEntity = new ${entityInfo.entity.getName()}();
	   ${entityInfo.importIfRequired(searchFieldName)}
	   searchEntity.set${entityInfo.getSimpleField(searchFieldName).getName()?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
       ${entityInfo.entity.getName()}SearchInput searchInput = new ${entityInfo.entity.getName()}SearchInput();
       searchInput.setEntity(searchEntity);
       searchInput.getFieldNames().add(searchFieldName);
	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.findBy(searchInput);
      entityList = searchResult.getResultList();
		Assert.assertEquals(7, entityList.size());
   }

   @Test
   @RunAsClient
   public void testCountBy()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */
	   
	  /*
	   * Start Create object. 
	   */
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   ${entityInfo.entity.getName()}DoD entityDoD = new ${entityInfo.entity.getName()}DoD();
	   for (int i = 0; i < 3; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	   <#assign searchFieldName = entityInfo.getRandomSimpleField().getName()>
	   String searchFieldName = "${searchFieldName}";
		Object searchValue=null; 		 
	   for (int i = 0; i < 7; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
		   if(searchValue==null){
		   	    searchValue =  entity.get${searchFieldName?cap_first}();
		   } else {
		   		// create all 7 objects with the same field value
	   			${entityInfo.importIfRequired(searchFieldName)}
		   		entity.set${searchFieldName?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
		   }
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	  /*
	   * End Create object
	   */
	   ${entityInfo.entity.getName()} searchEntity = new ${entityInfo.entity.getName()}();
	   ${entityInfo.importIfRequired(searchFieldName)}
	   searchEntity.set${entityInfo.getSimpleField(searchFieldName).getName()?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
       ${entityInfo.entity.getName()}SearchInput searchInput = new ${entityInfo.entity.getName()}SearchInput();
       searchInput.setEntity(searchEntity);
       searchInput.getFieldNames().add(searchFieldName);
	   Long count = ${entityInfo.entity.getName()?uncap_first}Service.countBy(searchInput);
	   Assert.assertEquals(new Long(7), count);
   }


   @Test
   @RunAsClient
   public void testFindByLike()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   */
	   
	  /*
	   * Start Create object. 
	   */
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   ${entityInfo.entity.getName()}DoD entityDoD = new ${entityInfo.entity.getName()}DoD();
	   for (int i = 0; i < 3; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	   <#assign searchFieldName = entityInfo.getRandomSimpleField().getName()>
	   String searchFieldName = "${searchFieldName}";
		Object searchValue=null; 		 
	   for (int i = 0; i < 7; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
		   if(searchValue==null){
		   	    searchValue =  entity.get${searchFieldName?cap_first}();
		   } else {
		   		// create all 7 objects with the same field value
		   		${entityInfo.importIfRequired(searchFieldName)}
		   		entity.set${searchFieldName?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
		   }
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	  /*
	   * End Create object
	   */
	   ${entityInfo.entity.getName()} searchEntity = new ${entityInfo.entity.getName()}();
	   ${entityInfo.importIfRequired(searchFieldName)}
	   searchEntity.set${entityInfo.getSimpleField(searchFieldName).getName()?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
       ${entityInfo.entity.getName()}SearchInput searchInput = new ${entityInfo.entity.getName()}SearchInput();
       searchInput.setEntity(searchEntity);
       searchInput.getFieldNames().add(searchFieldName);
	   searchResult = ${entityInfo.entity.getName()?uncap_first}Service.findByLike(searchInput);
      	entityList = searchResult.getResultList();
		Assert.assertEquals(7, entityList.size());
   }

   @Test
   @RunAsClient
   public void testCountByLike()
   {
	  /*
	   * Start cleanup
	   */   
	   ${entityInfo.entity.getName()}Service ${entityInfo.entity.getName()?uncap_first}Service = new ${entityInfo.entity.getName()}Service(url.toExternalForm());
  	   ${entityInfo.entity.getName()}SearchResult searchResult = ${entityInfo.entity.getName()?uncap_first}Service.listAll();
       List<${entityInfo.entity.getName()}> entityList = searchResult.getResultList();
	   for (${entityInfo.entity.getName()} ${entityInfo.entity.getName()?uncap_first} : entityList) {
		   ${entityInfo.entity.getName()?uncap_first}Service.deleteById(${entityInfo.entity.getName()?uncap_first}.getId());
	   }

	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}Service ${referencedType?uncap_first}Service = new ${referencedType}Service(url.toExternalForm());
	   ${referencedType}SearchResult ${referencedType?uncap_first}SearchResult = ${referencedType?uncap_first}Service.listAll();
	   List<${referencedType}> ${referencedType?uncap_first}List = ${referencedType?uncap_first}SearchResult.getResultList();
	   for (${referencedType} f : ${referencedType?uncap_first}List) {
		   ${referencedType?uncap_first}Service.deleteById(f.getId());
	   }
	   </#list>
	  /*
	   * End cleanup
	   * Start Create object. 
	   */
	   <#list entityInfo.referencedTypes as referencedType>
	   ${referencedType}DoD ${referencedType?uncap_first}DoD = new ${referencedType}DoD();
	   </#list>
	   ${entityInfo.entity.getName()}DoD entityDoD = new ${entityInfo.entity.getName()}DoD();
	   for (int i = 0; i < 3; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	   <#assign searchFieldName = entityInfo.getRandomSimpleField().getName()>
	   String searchFieldName = "${searchFieldName}";
		Object searchValue=null; 		 
	   for (int i = 0; i < 7; i++) {
		   ${entityInfo.entity.getName()} entity = entityDoD.newEntity();
		   if(searchValue==null){
		   	    searchValue =  entity.get${searchFieldName?cap_first}();
		   } else {
		   		// create all 7 objects with the same field value
		   		${entityInfo.importIfRequired(searchFieldName)}
		   		entity.set${searchFieldName?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
		   }
	
		   <#list entityInfo.aggregated as aggregatedField>
		   // Aggregate ${aggregatedField.getName()}
		   ${aggregatedField.getType()} ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}DoD.newEntity();
		   ${aggregatedField.getName()} = ${aggregatedField.getType()?uncap_first}Service.create(${aggregatedField.getName()});
		   entity.set${aggregatedField.getName()?cap_first}(${aggregatedField.getName()});
		   
		   </#list>
		   ${entityInfo.entity.getName()} created = ${entityInfo.entity.getName()?uncap_first}Service.create(entity);
	   }
	  /*
	   * End Create object
	   */
	   ${entityInfo.entity.getName()} searchEntity = new ${entityInfo.entity.getName()}();
	   ${entityInfo.importIfRequired(searchFieldName)}
	   searchEntity.set${entityInfo.getSimpleField(searchFieldName).getName()?cap_first}((${entityInfo.getSimpleField(searchFieldName).getType()})searchValue);
       ${entityInfo.entity.getName()}SearchInput searchInput = new ${entityInfo.entity.getName()}SearchInput();
       searchInput.setEntity(searchEntity);
       searchInput.getFieldNames().add(searchFieldName);
	   Long count = ${entityInfo.entity.getName()?uncap_first}Service.countBy(searchInput);
	   Assert.assertEquals(new Long(7), count);
   }   

}
