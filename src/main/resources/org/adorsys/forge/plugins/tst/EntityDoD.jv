package org.adorsys.forge.plugins.tst;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
<#list packagesToImport as packageToImport>
import ${packageToImport}.*;
</#list>

public class ${entityInfo.entity.getName()}DoD {

	private Random random = new Random();

   <#list entityInfo.managedCompositions as composedType>
	private ${composedType}DoD ${composedType?uncap_first}DoD = new ${composedType}DoD();

   </#list>

	public ${entityInfo.entity.getName()} newEntity(){
	   // create ${entityInfo.entity.getName()}
	   ${entityInfo.entity.getName()} entity = new ${entityInfo.entity.getName()}();

	   <#list entityInfo.simpleStringFields as simpleStringField>
	   entity.set${simpleStringField.getName()?cap_first}(RandomStringUtils.randomAlphabetic(10));

	   </#list>
	   <#list entityInfo.simpleLongFields as simpleLongField>
	   entity.set${simpleLongField.getName()?cap_first}(random.nextLong());

	   </#list>
	   <#list entityInfo.simpleIntegerFields as simpleIntegerField>
	   entity.set${simpleIntegerField.getName()?cap_first}(random.nextInt());

	   </#list>
	   <#list entityInfo.simpleDoubleFields as simpleIntegerField>
	   entity.set${simpleIntegerField.getName()?cap_first}(random.nextDouble());

	   </#list>
	   <#list entityInfo.simpleFloatFields as simpleFloatField>
	   entity.set${simpleFloatField.getName()?cap_first}(random.nextFloat());

	   </#list>
	   <#list entityInfo.simpleBooleanFields as simpleBooleanField>
	   entity.set${simpleBooleanField.getName()?cap_first}(random.nextBoolean());

	   </#list>
	   <#list entityInfo.simpleDateFields as simpleDateField>
	   entity.set${simpleDateField.getName()?cap_first}(new Date());

	   </#list>
	   // set simple float fields
	   <#list entityInfo.composed as composedField>
	   <#if composedField.associationManager>
	   entity.set${composedField.getName()?cap_first}(${composedField.getType()?uncap_first}DoD.newEntity());
	   </#if>

	   </#list>
		return entity;
	}
	
	public List<String> modify(${entityInfo.entity.getName()} entity){
		// ${entityInfo.randomFields()}
	   List<String> result = new ArrayList<String>();
	   <#list entityInfo.simpleStringFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${field.getName()?cap_first}(RandomStringUtils.randomAlphabetic(10));
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.simpleLongFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${simpleLongField.getName()?cap_first}(random.nextLong());
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.simpleIntegerFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${field.getName()?cap_first}(random.nextInteger());
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.simpleDoubleFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${field.getName()?cap_first}(random.nextDouble());
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.simpleFloatFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${field.getName()?cap_first}(random.nextFloat());
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.simpleBooleanFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${field.getName()?cap_first}(random.nextBoolean());
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.simpleDateFields as field>
	   <#if entityInfo.containsField(field)>
	   entity.set${field.getName()?cap_first}(new Date());
	   result.add("${field.getName()}");
	   </#if>

	   </#list>
	   <#list entityInfo.composed as field>
	   <#if field.associationManager>
	   List<String> ${field.getName()}List = ${field.getType()?uncap_first}DoD.modify(entity.get${field.getName()?cap_first}());
	   for (String nested : ${field.getName()}List) {
	   		result.add("${field.getName()}"+"."+nested);
	   }
	   </#if>

	   </#list>
	   return result;
   	}

	public Object readRandomValue(${entityInfo.entity.getName()} entity) {
		return entity.get${entityInfo.getRandomSimpleField().getName()?cap_first}();
	}
}
